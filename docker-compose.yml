version: '3.8'

services:
  # --- CÁC DATABASE VÀ REDIS GIỮ NGUYÊN ---
  mongodb:
    image: mongo:6.0
    container_name: ecommerce-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    networks:
      - ecommerce-network

  redis:
    image: redis:7.0-alpine
    container_name: ecommerce-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - ecommerce-network

  # --- CÁC MICROSERVICES ĐÃ ĐƯỢC CẬP NHẬT CHO DEV ---

  # User Service
  user-service:
    build:
      context: .
      dockerfile: microservices/user-service/Dockerfile
      target: builder
    container_name: user-service
    env_file:
      - ./.env
    command: npm run dev:user
    ports:
      # Cổng trong container (sau dấu :) là 3000 theo mặc định của NestJS
      - "3001:3000"
    # Thêm 'volumes' để mount mã nguồn cho hot-reloading
    volumes:
      - ./microservices/user-service:/usr/src/app/microservices/user-service
      - ./libs:/usr/src/app/libs # Mount thư mục libs chung
      - /usr/src/app/node_modules # Loại trừ node_modules để dùng bản trong container
      - /usr/src/app/dist
    environment:
      - NODE_ENV=development # Đặt biến môi trường cho development
    depends_on:
      - mongodb
      - redis
    networks:
      - ecommerce-network

  # Product Service
  product-service:
    build:
      context: .
      dockerfile: microservices/product-service/Dockerfile
      target: builder
    container_name: product-service
    env_file:
      - ./.env
    command: npm run dev:product
    ports:
      - "3002:3000"
    volumes:
      - ./microservices/product-service:/usr/src/app/microservices/product-service
      - ./libs:/usr/src/app/libs
      - /usr/src/app/node_modules
      - /usr/src/app/dist
    environment:
      - NODE_ENV=development
    depends_on:
      - mongodb
      - redis
      - user-service
    networks:
      - ecommerce-network

  # Order Service
  order-service:
    build:
      context: .
      dockerfile: microservices/order-service/Dockerfile
      target: builder
    container_name: order-service
    env_file:
      - ./.env
    command: npm run dev:order
    ports:
      - "3003:3000"
    volumes:
      - ./microservices/order-service:/usr/src/app/microservices/order-service
      - ./libs:/usr/src/app/libs
      - /usr/src/app/node_modules
      - /usr/src/app/dist
    environment:
      - NODE_ENV=development
    depends_on:
      - mongodb
      - redis
      - product-service
      - user-service
    networks:
      - ecommerce-network

  # Payment Service
  payment-service:
    build:
      context: .
      dockerfile: microservices/payment-service/Dockerfile
      target: builder
    container_name: payment-service
    env_file:
      - ./.env
    command: npm run dev:payment
    ports:
      - "3004:3000"
    volumes:
      - ./microservices/payment-service:/usr/src/app/microservices/payment-service
      - ./libs:/usr/src/app/libs
      - /usr/src/app/node_modules
      - /usr/src/app/dist
    environment:
      - NODE_ENV=development
    depends_on:
      - mongodb
      - redis
      - order-service
    networks:
      - ecommerce-network

  # Nginx API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "80:80"
      - "443:443"
    # Mount file config của Nginx để có thể thay đổi mà không cần build lại image
    volumes:
      - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - user-service
      - product-service
      - order-service
      - payment-service
    networks:
      - ecommerce-network

volumes:
  mongo_data:
  redis_data:


networks:
  ecommerce-network:
    driver: bridge
